
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!WORKINIG POINT!!!!!!!!!!!!!!!!!!!!!!!!!d
// the board will take a parameter 'n'
  // if parameter is not a number, parameter = object which represents the
  // else board.remaining = {board state}

// generate keys for a given board of size 'n'
// make n*n x,y coordinates (row, column) as keys
// give keys properties row, column
// val total = 2(n-1), which is the number of diagonals
// ----for left major diaganols -----
// l: n - (row - column)
//
// ----- for right minor diagonals -------
// r: row + column + 1




var nQueensSolutions = function(n) {
  var board = [];
  var iters = Math.round(n/2);
  var possibilities = 0;
  var rowObj = '0';
  for ( var i = 0; i < n; i++ ) {
    board.push([]);
  };
  for ( var j = 0; j < n; j++ ) {
    rowObj.concat('0');
  }
  for (var k = 0; k < n;k++){
    board[j].push(rowObj);
  }

  var traverseChoices = function(board, currentColumn, currentRow, center) {
    console.log(currentColumn, currentRow);
    console.log(board);
    var newBoard = [];
    var leftOps = n - (Math.max(currentRow,currentColumn) + 1);
    var rightOps = (n - 1) - Math.max(Math.abs(0 - currentRow), Math.abs((n- 1) - currentColumn));

    // creating deep copy
    board.forEach(function(v,i){
      newBoard.push(v.slice());
    });

    // if we are on the last row increase our solutions

    //OLD LOGARITHM
    // if (currentRow === n - 1){
    //   possibilities += 2;
    //   if (center === true){
    //     possibilities--;
    //   };
    //   return;
    // };
    if (currentRow === n - 1){
      possibilities += 1;
      return;
    }

    // make columns invalid
    for(var i = (currentRow + 1) ; i < n; i++){
      newBoard[i][currentColumn] = 1;
    };
    // make left diagnols invalid
    for(var j = 0; j < leftOps; j++ ){
      newBoard[currentRow + 1 + j][currentColumn + 1 + j] = 1;
    };

    // make right diagonals
    // = (n-1) - Math.max(abs(0-r2), abs((n-1)-c2))
    for (var k = 0; k < rightOps; k++){
      newBoard[currentRow + 1 + k][currentColumn - (1 + k)] = 1;
    };

    // console.log(newBoard);
    // increase row by one
    // currentRow++;
    currentRow = currentRow + 1;
    // console.log(currentRow);
    for ( var q = 0; q < n; q++ ) {
      // debugger;
      // we need to return if the function doesn't find any values in the current row....
      if ( newBoard[currentRow][q] === 0 ) {
        traverseChoices( newBoard, q, currentRow, center );
      }
    }
  }
  // end of function
  //  base case, iterating over first choices

  //OLD WAYS
  // for (var k = 0; k < iters; k++ ) {
      // if ( (k === (iters - 1)) && ((iters % 2) !== 0) ){
        // traverseChoices(board, k , 0 , true);
      // }
      // else {
        // traverseChoices(board, k, 0)
      // }
  // };
  for(var k = 0; k < n; k++){
    traverseChoices(board, k , 0);
  }
  return possibilities;
};



